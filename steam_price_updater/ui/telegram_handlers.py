"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram –¥–ª—è Steam Price Updater
"""

import logging
import threading
from datetime import datetime as dt
from typing import TYPE_CHECKING

from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import telebot

from ..core.config import Config, LOGGER_PREFIX, CallbackButtons, settings_manager, VERSION, UUID
from ..core.lot_manager import lot_manager
from ..core.updater import lot_updater
from ..api.currency import currency_api
from ..api.steam import steam_api
from ..core.cache import cache_manager
from .wizard import lot_wizard

if TYPE_CHECKING:
    from tg_bot import CBT
else:
    from tg_bot import CBT

logger = logging.getLogger("FPC.steam_price_updater")

class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self):
        self.bot = None
        self.tg = None
    
    def setup(self, cardinal) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        if not cardinal.telegram:
            logger.warning(f"{LOGGER_PREFIX} Telegram –±–æ—Ç –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ FunPayCardinal")
            return
        
        self.tg = cardinal.telegram
        self.bot = self.tg.bot
        
        logger.info(f"{LOGGER_PREFIX} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()
        
        logger.info(f"{LOGGER_PREFIX} Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.tg.cbq_handler(self.open_settings, lambda c: c.data and c.data.startswith(f"{CBT.PLUGIN_SETTINGS}:{UUID}"))
        self.tg.cbq_handler(self.show_settings, lambda c: c.data and c.data.startswith(CallbackButtons.SHOW_SETTINGS))
        self.tg.cbq_handler(self.show_lots_menu, lambda c: c.data and c.data.startswith(CallbackButtons.LOTS_MENU))
        self.tg.cbq_handler(self.show_stats, lambda c: c.data and c.data.startswith(CallbackButtons.STATS))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ—Ç–æ–≤
        self.tg.cbq_handler(self.start_lot_wizard, lambda c: c.data and c.data.startswith(CallbackButtons.TEXT_CHANGE_LOT))
        self.tg.cbq_handler(self.edit_lot_menu, lambda c: c.data and c.data.startswith(CallbackButtons.EDIT_LOT))
        self.tg.cbq_handler(self.toggle_lot_status, lambda c: c.data and c.data.startswith(CallbackButtons.TOGGLE_LOT))
        self.tg.cbq_handler(self.delete_lot_confirm, lambda c: c.data and c.data.startswith(CallbackButtons.DELETE_LOT))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tg.cbq_handler(self.switch_currency, lambda c: c.data and c.data.startswith(CallbackButtons.CHANGE_CURRENCY))
        self.tg.cbq_handler(self.switch_steam_currency, lambda c: c.data and c.data.startswith(CallbackButtons.CHANGE_STEAM_CURRENCY))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.tg.cbq_handler(self.update_now, lambda c: c.data and c.data.startswith(CallbackButtons.UPDATE_NOW))
        self.tg.cbq_handler(self.update_single_lot, lambda c: c.data and c.data.startswith("update_single_lot"))
        self.tg.cbq_handler(self.refresh_currency_rates, lambda c: c.data and c.data.startswith(CallbackButtons.REFRESH_RATES))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        def currency_callback_handler(call):
            logger.info(f"{LOGGER_PREFIX} –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–ª—è: {call.data}")
            return lot_wizard.handle_currency_selection(call, self.bot)
        
        self.tg.cbq_handler(currency_callback_handler, lambda c: c.data and c.data.startswith("wizard_currency:"))
        logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ wizard_currency –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.tg.msg_handler(self.handle_message)
    
    def open_settings(self, call: telebot.types.CallbackQuery) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç—ã
            lot_manager.load_lots()
            
            keyboard = K()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.row(
                B("üì¶ –õ–æ—Ç—ã", callback_data=f"{CallbackButtons.LOTS_MENU}:0"),
                B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"{CallbackButtons.UPDATE_NOW}:")
            )
            
            keyboard.row(
                B("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{CallbackButtons.SHOW_SETTINGS}:"),
                B("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"{CallbackButtons.STATS}:")
            )
            
            keyboard.row(
                B("‚ùì –ü–æ–º–æ—â—å", url="https://t.me/humblegodq"),
                B("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"{CBT.EDIT_PLUGIN}:{UUID}:0")
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats = lot_manager.get_lots_stats()
            active_lots = stats["active"]
            total_lots = stats["total"]
            
            text = f"üéÆ <b>Steam Price Updater v{VERSION}</b>\n\n"
            
            if total_lots == 0:
                text += f"üì¶ <b>–õ–æ—Ç—ã:</b> –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã\n"
            else:
                text += f"üì¶ <b>–õ–æ—Ç—ã:</b> {total_lots} –≤—Å–µ–≥–æ, {active_lots} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
            
            hours = settings_manager.get('time', 21600) // 3600
            text += f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {hours} —á\n"
            text += f"üí∞ <b>–í–∞–ª—é—Ç–∞:</b> {settings_manager.get('currency', 'USD')}\n\n"
            
            # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
            text += "<b>üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (USD –∫ –º–µ—Å—Ç–Ω–æ–π):</b>\n"
            try:
                uah_rate = currency_api.get_currency_rate("UAH")
                rub_rate = currency_api.get_currency_rate("RUB")
                kzt_rate = currency_api.get_currency_rate("KZT")
                
                text += f"üá∫üá¶ UAH: {uah_rate:.2f}\n"
                text += f"üá∑üá∫ RUB: {rub_rate:.2f}\n"
                text += f"üá∞üáø KZT: {kzt_rate:.2f}\n"
            except Exception:
                text += f"üí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: –∑–∞–≥—Ä—É–∑–∫–∞...\n"
            
            text += f"üìà –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –≤–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å: {settings_manager.get('first_markup', 3)}%\n"
            text += f"üí∏ –ú–∞—Ä–∂–∞: {settings_manager.get('second_markup', 5)}% + ${settings_manager.get('fixed_markup', 0.5)}"
            
            self.bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                      reply_markup=keyboard, parse_mode="HTML")
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ open_settings: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def show_settings(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Steam Price Updater</b>\n\n"
            
            text += f"üí± <b>–í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–æ–≤:</b> {settings_manager.get('currency', 'USD')}\n"
            text += f"‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {settings_manager.get('time', 21600) // 3600} —á\n\n"
            
            text += f"<b>üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ü–µ–Ω–æ–∫:</b>\n"
            text += f"üìà –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –≤–∞–ª—é—Ç–Ω—ã–π –∫—É—Ä—Å: {settings_manager.get('first_markup', 3)}%\n"
            text += f"üìä –ú–∞—Ä–∂–∞: {settings_manager.get('second_markup', 5)}%\n"
            text += f"üíµ –§–∏–∫—Å. –Ω–∞—Ü–µ–Ω–∫–∞: ${settings_manager.get('fixed_markup', 0.5)}\n\n"
            
            text += f"<b>üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
            text += f"üéÆ Steam –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {Config.DEFAULT_STEAM_CURRENCY}\n"
            text += f"‚è∞ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏: {Config.LOT_PROCESSING_DELAY}—Å\n"
            text += f"üîÑ –ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫: {Config.MAX_RETRIES}\n"
            
            keyboard = K()
            keyboard.row(
                B("üí± –í–∞–ª—é—Ç–∞", callback_data=f"{CallbackButtons.CHANGE_CURRENCY}:switch"),
                B("üîÑ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data=f"{CallbackButtons.REFRESH_RATES}:")
            )
            keyboard.add(B("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
            
            self.bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                      reply_markup=keyboard, parse_mode="HTML")
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_settings: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def show_lots_menu(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞–º–∏"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ—Ç—ã
            lot_manager.load_lots()
            
            page = int(call.data.split(":")[-1]) if call.data.split(":")[-1].isdigit() else 0
            per_page = Config.LOTS_PER_PAGE
            
            lot_items = [(lot_id, lot_data) for lot_id, lot_data in lot_manager.lots.items() if lot_id != "0"]
            total_lots = len(lot_items)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
            lot_items.sort(key=lambda x: (not x[1].get("on", False), x[0]))
            
            start_idx = page * per_page
            end_idx = start_idx + per_page
            current_lots = lot_items[start_idx:end_idx]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            active_count = len([l for _, l in lot_items if l.get("on", False)])
            text = f"üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏</b>\n\n"
            text += f"üìä <b>–í—Å–µ–≥–æ:</b> {total_lots} | <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_count}\n"
            if total_lots > per_page:
                text += f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</b> {page + 1}/{(total_lots - 1) // per_page + 1}\n"
            text += "\n"
            
            keyboard = K()
            
            if total_lots == 0:
                text += "üìù <i>–õ–æ—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</i>\n\n"
                text += "üí° <b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b>\n"
                text += "1. –ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç'\n"
                text += "2. –í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ FunPay\n"
                text += "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Steam ID –∏–≥—Ä—ã"
            else:
                text += "<b>–í–∞—à–∏ –ª–æ—Ç—ã:</b>\n"
                
                for lot_id, lot_data in current_lots:
                    game_name = steam_api.get_game_name(lot_data.get("steam_id", ""))
                    status_icon = "üü¢" if lot_data.get("on", False) else "üî¥"
                    
                    button_text = f"{status_icon} {game_name[:25]}"
                    callback_data = f"{CallbackButtons.EDIT_LOT}:{lot_id}"
                    keyboard.add(B(button_text, callback_data=callback_data))
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            action_buttons = []
            if page > 0:
                action_buttons.append(B("‚¨Ö –ü—Ä–µ–¥", callback_data=f"{CallbackButtons.LOTS_MENU}:{page-1}"))
            if end_idx < total_lots:
                action_buttons.append(B("–°–ª–µ–¥ ‚û°", callback_data=f"{CallbackButtons.LOTS_MENU}:{page+1}"))
            
            if action_buttons:
                keyboard.row(*action_buttons)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.row(
                B("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ—Ç", callback_data=f"{CallbackButtons.TEXT_CHANGE_LOT}:0"),
                B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"{CallbackButtons.UPDATE_NOW}:")
            )
            keyboard.add(B("‚óÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
            
            self.bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                      reply_markup=keyboard, parse_mode="HTML")
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_lots_menu: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def start_lot_wizard(self, call: telebot.types.CallbackQuery) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞"""
        lot_wizard.start_wizard(call, self.bot)
    
    def edit_lot_menu(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞"""
        try:
            lot_id = call.data.split(":")[-1]
            
            if lot_id not in lot_manager.lots:
                self.bot.answer_callback_query(call.id, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            lot_data = lot_manager.lots[lot_id]
            game_name = steam_api.get_game_name(lot_data.get("steam_id", ""))
            
            status_icon = "üü¢" if lot_data.get("on", False) else "üî¥"
            text = f"{status_icon} <b>–õ–æ—Ç #{lot_id}</b>\n"
            text += f"üéÆ <b>{game_name}</b>\n\n"
            
            # –î–∞–Ω–Ω—ã–µ Steam
            steam_id = lot_data.get("steam_id", "N/A")
            steam_currency = lot_data.get("steam_currency", "UAH")
            
            if str(steam_id).startswith("sub_"):
                text += f"üì¶ <b>Steam Sub ID:</b> {steam_id[4:]}\n"
                text += f"üíø <b>–¢–∏–ø:</b> DLC/Package\n"
            else:
                text += f"üéØ <b>Steam App ID:</b> {steam_id}\n"
                text += f"üéÆ <b>–¢–∏–ø:</b> –ò–≥—Ä–∞\n"
            
            text += f"üí± <b>–í–∞–ª—é—Ç–∞ Steam:</b> {steam_currency}\n\n"
            
            # –¶–µ–Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            min_price = lot_data.get("min", 1.0)
            max_price = lot_data.get("max", 5000.0)
            last_price = lot_data.get("last_price", 0)
            last_steam_price = lot_data.get("last_steam_price", 0)
            
            text += "üí∞ <b>–¶–µ–Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            text += f"üîª –ú–∏–Ω. —Ü–µ–Ω–∞: ${min_price:.2f}\n"
            text += f"üî∫ –ú–∞–∫—Å. —Ü–µ–Ω–∞: ${max_price:.2f}\n"
            
            if last_price > 0:
                text += f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${last_price:.2f}\n"
            if last_steam_price > 0:
                text += f"üéÆ Steam —Ü–µ–Ω–∞: {last_steam_price:.2f} {steam_currency}\n"
            
            text += "\n"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
            last_update = lot_data.get("last_update", 0)
            global_interval_hours = settings_manager.get("time", 21600) // 3600
            
            text += "‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
            text += f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {global_interval_hours} —á (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)\n"
            
            if last_update > 0:
                last_update_str = dt.fromtimestamp(last_update).strftime("%d.%m %H:%M")
                text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {last_update_str}\n"
            else:
                text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: –ù–∏–∫–æ–≥–¥–∞\n"
            
            # –ö–Ω–æ–ø–∫–∏
            keyboard = K()
            
            status_text = "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å" if lot_data.get("on", False) else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
            keyboard.add(B(status_text, callback_data=f"{CallbackButtons.TOGGLE_LOT}:{lot_id}"))
            
            keyboard.row(
                B("üí± –í–∞–ª—é—Ç–∞", callback_data=f"{CallbackButtons.CHANGE_STEAM_CURRENCY}:{lot_id}"),
                B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ—Ç", callback_data=f"update_single_lot:{lot_id}")
            )
            
            keyboard.row(
                B("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CallbackButtons.DELETE_LOT}:{lot_id}"),
                B("‚óÄ –ö –ª–æ—Ç–∞–º", callback_data=f"{CallbackButtons.LOTS_MENU}:0")
            )
            
            self.bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                      reply_markup=keyboard, parse_mode="HTML")
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ edit_lot_menu: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def toggle_lot_status(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–æ—Ç–∞"""
        try:
            lot_id = call.data.split(":")[-1]
            
            if lot_id not in lot_manager.lots:
                self.bot.answer_callback_query(call.id, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            lot_manager.lots[lot_id]["on"] = not lot_manager.lots[lot_id].get("on", False)
            lot_manager.save_lots()
            
            status = "–≤–∫–ª—é—á–µ–Ω" if lot_manager.lots[lot_id]["on"] else "–≤—ã–∫–ª—é—á–µ–Ω"
            self.bot.answer_callback_query(call.id, f"–õ–æ—Ç {status}")
            
            self.edit_lot_menu(call)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ toggle_lot_status: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def delete_lot_confirm(self, call: telebot.types.CallbackQuery) -> None:
        """–£–¥–∞–ª—è–µ—Ç –ª–æ—Ç"""
        try:
            lot_id = call.data.split(":")[-1]
            
            if lot_manager.delete_lot(lot_id):
                self.bot.answer_callback_query(call.id, f"–õ–æ—Ç {lot_id} —É–¥–∞–ª–µ–Ω")
                self.show_lots_menu(call)
            else:
                self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
                
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ delete_lot_confirm: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def switch_currency(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∞–ª—é—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account_currencies = Config.ACCOUNT_CURRENCIES
            
            current_currency = settings_manager.get("currency", "USD")
            try:
                current_index = account_currencies.index(current_currency)
                new_currency = account_currencies[(current_index + 1) % len(account_currencies)]
            except ValueError:
                new_currency = "USD"
            
            settings_manager.set("currency", new_currency)
            settings_manager.save_settings()
            
            currency_symbols = {"USD": "$", "RUB": "‚ÇΩ", "EUR": "‚Ç¨"}
            symbol = currency_symbols.get(new_currency, new_currency)
            self.bot.answer_callback_query(call.id, f"–í–∞–ª—é—Ç–∞: {symbol} {new_currency}")
            
            self.show_settings(call)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ switch_currency: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def switch_steam_currency(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∞–ª—é—Ç—É Steam –¥–ª—è –ª–æ—Ç–∞"""
        try:
            lot_id = call.data.split(":")[-1]
            
            if lot_id not in lot_manager.lots:
                self.bot.answer_callback_query(call.id, "‚ùå –õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            currencies = Config.SUPPORTED_CURRENCIES
            current_currency = lot_manager.lots[lot_id].get("steam_currency", "UAH")
            
            try:
                current_index = currencies.index(current_currency)
                new_currency = currencies[(current_index + 1) % len(currencies)]
            except ValueError:
                new_currency = "UAH"
            
            lot_manager.lots[lot_id]["steam_currency"] = new_currency
            lot_manager.save_lots()
            
            self.bot.answer_callback_query(call.id, f"–í–∞–ª—é—Ç–∞ Steam: {new_currency}")
            self.edit_lot_menu(call)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ switch_steam_currency: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def update_now(self, call: telebot.types.CallbackQuery) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤"""
        try:
            active_lots = lot_manager.get_active_lots()
            
            if not active_lots:
                self.bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤")
                return
            
            self.bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
            
            def update_thread():
                results = lot_updater.update_all_lots()
                result_text = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {results['updated']}\n–û—à–∏–±–æ–∫: {results['failed']}"
                self.bot.send_message(call.message.chat.id, result_text)
            
            threading.Thread(target=update_thread, daemon=True).start()
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ update_now: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def update_single_lot(self, call: telebot.types.CallbackQuery) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ª–æ—Ç"""
        try:
            lot_id = call.data.split(":")[-1]
            
            self.bot.answer_callback_query(call.id, f"üîÑ –û–±–Ω–æ–≤–ª—è—é –ª–æ—Ç {lot_id}...")
            
            def update_thread():
                success = lot_updater.update_lot_now(lot_id)
                if success:
                    self.bot.send_message(call.message.chat.id, f"‚úÖ –õ–æ—Ç {lot_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                else:
                    self.bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞ {lot_id}")
            
            threading.Thread(target=update_thread, daemon=True).start()
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ update_single_lot: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def refresh_currency_rates(self, call: telebot.types.CallbackQuery) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
        try:
            self.bot.answer_callback_query(call.id, "–û–±–Ω–æ–≤–ª—è—é –∫—É—Ä—Å—ã...")
            
            def refresh_thread():
                try:
                    results = currency_api.refresh_all_rates()
                    
                    result_text = f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n\n"
                    for currency, rate in results.items():
                        if currency != "USD":
                            result_text += f"üá∫üá∏ USD/{currency}: {rate:.2f}\n"
                    result_text += f"\nüïê {dt.now().strftime('%H:%M:%S')}"
                    
                    self.bot.send_message(call.message.chat.id, result_text)
                    
                except Exception as e:
                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
                    self.bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
            
            threading.Thread(target=refresh_thread, daemon=True).start()
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ refresh_currency_rates: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def show_stats(self, call: telebot.types.CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            stats = lot_manager.get_lots_stats()
            cache_stats = cache_manager.get_cache_stats()
            
            text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Steam Price Updater\n\n"
            text += f"üì¶ –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: {stats['total']}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active']}\n"
            text += f"üí∞ –õ–æ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {stats['with_prices']}\n"
            text += f"üîÑ –ö–µ—à: {cache_stats['total']} –∑–∞–ø–∏—Å–µ–π\n"
            text += f"  ‚Ä¢ Steam —Ü–µ–Ω—ã: {cache_stats['steam_prices']}\n"
            text += f"  ‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç: {cache_stats['currency_rates']}\n"
            text += f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä: {cache_stats['game_names']}\n"
            
            # –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updater_status = lot_updater.get_status()
            text += f"\nüîÑ –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if updater_status['running'] else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            
            keyboard = K()
            keyboard.add(B("‚óÄ –ù–∞–∑–∞–¥", callback_data=f"{CBT.PLUGIN_SETTINGS}:{UUID}:0"))
            
            self.bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                      reply_markup=keyboard, parse_mode="HTML")
            self.bot.answer_callback_query(call.id)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_stats: {e}")
            self.bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def handle_message(self, message: telebot.types.Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä
            if lot_wizard.handle_message(message, self.bot):
                return
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ handle_message: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
telegram_handlers = TelegramHandlers()