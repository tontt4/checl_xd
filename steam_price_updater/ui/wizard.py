"""
–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–æ–≤
"""

import json
import os
import logging
from typing import Dict, Any, Optional

from telebot.types import InlineKeyboardMarkup as K, InlineKeyboardButton as B
import telebot

from ..core.config import LOGGER_PREFIX, CallbackButtons, settings_manager
from ..core.lot_manager import lot_manager
from ..api.steam import steam_api
from ..core.price_calculator import price_calculator

logger = logging.getLogger("FPC.steam_price_updater")

class LotWizard:
    """–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self):
        self.wizard_states = {}
        self.wizard_file = "storage/plugins/steam_price_updater_wizard.json"
        self.load_wizard_states()
    
    def load_wizard_states(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.wizard_file):
                with open(self.wizard_file, "r", encoding="utf-8") as f:
                    content = f.read()
                    if content.strip():
                        self.wizard_states = json.loads(content)
                        logger.debug(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {len(self.wizard_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        except Exception as e:
            logger.warning(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞: {e}")
            self.wizard_states = {}
    
    def save_wizard_states(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –≤ —Ñ–∞–π–ª"""
        try:
            os.makedirs("storage/plugins", exist_ok=True)
            with open(self.wizard_file, "w", encoding="utf-8") as f:
                f.write(json.dumps(self.wizard_states, indent=4, ensure_ascii=False))
                f.flush()
            logger.debug(f"{LOGGER_PREFIX} –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(self.wizard_states)} —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        except Exception as e:
            logger.warning(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞: {e}")
    
    def get_user_key(self, obj) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ CallbackQuery, —Ç–∞–∫ –∏ Message
        if hasattr(obj, 'message'):  # CallbackQuery
            return f"{obj.message.chat.id}_{obj.from_user.id}"
        else:  # Message
            return f"{obj.chat.id}_{obj.from_user.id}"
    
    def start_wizard(self, call: telebot.types.CallbackQuery, bot) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞"""
        try:
            user_key = self.get_user_key(call)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.wizard_states[user_key] = {"step": "lot_id"}
            self.save_wizard_states()
            
            text = "üßô‚Äç‚ôÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞</b>\n\n"
            text += "üìã <b>–®–∞–≥ 1 –∏–∑ 4: ID –ª–æ—Ç–∞</b>\n\n"
            text += "–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ —Å FunPay:\n"
            text += "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –ª–æ—Ç –Ω–∞ funpay.com\n"
            text += "‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –∏–∑ URL\n"
            text += "‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: –∏–∑ funpay.com/lots/offer?id=<b>12345</b>\n"
            text += "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ: <code>12345</code>\n\n"
            text += "üí° –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞—à–∏–º –ª–æ—Ç–æ–º –Ω–∞ FunPay"
            
            keyboard = K()
            keyboard.add(B("‚óÄ –û—Ç–º–µ–Ω–∞", callback_data=f"{CallbackButtons.LOTS_MENU}:0"))
            
            bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                  reply_markup=keyboard, parse_mode="HTML")
            bot.answer_callback_query(call.id, "üßô‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä!")
            
            logger.info(f"{LOGGER_PREFIX} –ú–∞—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_key}")
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
    
    def handle_message(self, message: telebot.types.Message, bot) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞"""
        try:
            if not message.text or not message.from_user:
                return False
            
            user_key = self.get_user_key(message)
            
            if user_key not in self.wizard_states:
                return False
            
            state_data = self.wizard_states[user_key]
            step = state_data.get("step")
            text = message.text.strip()
            
            logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ –º–∞—Å—Ç–µ—Ä–∞: {step}, —Ç–µ–∫—Å—Ç: '{text}'")
            
            if step == "lot_id":
                return self._handle_lot_id(message, bot, user_key, text)
            elif step == "steam_id":
                return self._handle_steam_id(message, bot, user_key, text)
            elif step == "max_price":
                return self._handle_max_price(message, bot, user_key, text)
            
            return False
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
            return False
    
    def _handle_lot_id(self, message, bot, user_key: str, text: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –ª–æ—Ç–∞"""
        if not text.isdigit():
            bot.reply_to(message, "‚ùå ID –ª–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
            return True
        
        if text in lot_manager.lots:
            bot.reply_to(message, f"‚ùå –õ–æ—Ç {text} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        self.wizard_states[user_key] = {"step": "steam_id", "lot_id": text}
        self.save_wizard_states()
        
        text_msg = "üßô‚Äç‚ôÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞</b>\n\n"
        text_msg += "üìã <b>–®–∞–≥ 2 –∏–∑ 4: Steam ID</b>\n\n"
        text_msg += f"‚úÖ ID –ª–æ—Ç–∞: <code>{text}</code>\n\n"
        text_msg += "–í–≤–µ–¥–∏—Ç–µ Steam ID –∏–≥—Ä—ã:\n"
        text_msg += "‚Ä¢ –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä: <code>730</code> (CS2)\n"
        text_msg += "‚Ä¢ –î–ª—è DLC: <code>sub_12345</code>\n"
        text_msg += "‚Ä¢ –ù–∞–π—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞ steamdb.info"
        
        keyboard = K()
        keyboard.add(B("‚óÄ –ö –ª–æ—Ç–∞–º", callback_data=f"{CallbackButtons.LOTS_MENU}:0"))
        
        bot.send_message(message.chat.id, text_msg, reply_markup=keyboard, parse_mode="HTML")
        return True
    
    def _handle_steam_id(self, message, bot, user_key: str, text: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Steam ID"""
        state_data = self.wizard_states[user_key]
        lot_id = state_data.get("lot_id")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º Steam ID
        is_valid, id_type, clean_id = steam_api.validate_steam_id(text)
        if not is_valid:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Steam ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è –∏–≥—Ä –∏–ª–∏ sub_12345 –¥–ª—è DLC")
            return True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        steam_price = steam_api.get_steam_price(text, "UAH")
        if steam_price is None:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∏–∑ Steam API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Steam ID –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return True
        
        if steam_price == 0.0:
            bot.reply_to(message, "‚ùå –≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –∏–ª–∏ DLC. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ª–æ—Ç –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
            return True
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        min_price = price_calculator.calculate_lot_price(steam_price, "UAH")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
        self.wizard_states[user_key] = {
            "step": "currency",
            "lot_id": lot_id,
            "steam_id": text,
            "min_price": min_price
        }
        self.save_wizard_states()
        
        text_msg = "üßô‚Äç‚ôÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞</b>\n\n"
        text_msg += "üìã <b>–®–∞–≥ 3 –∏–∑ 4: –í–∞–ª—é—Ç–∞ Steam</b>\n\n"
        text_msg += f"‚úÖ ID –ª–æ—Ç–∞: <code>{lot_id}</code>\n"
        text_msg += f"‚úÖ Steam ID: <code>{text}</code> ({id_type})\n"
        text_msg += f"‚úÖ –ú–∏–Ω. —Ü–µ–Ω–∞: <code>{min_price:.2f} {settings_manager.get('currency', 'USD')}</code>\n\n"
        text_msg += "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É Steam –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
        
        keyboard = K()
        keyboard.row(
            B("üá∫üá¶ UAH", callback_data=f"wizard_currency:UAH"),
            B("üá∫üá∏ USD", callback_data=f"wizard_currency:USD")
        )
        keyboard.row(
            B("üá∑üá∫ RUB", callback_data=f"wizard_currency:RUB"),
            B("üá∞üáø KZT", callback_data=f"wizard_currency:KZT")
        )
        keyboard.add(B("üá™üá∫ EUR", callback_data=f"wizard_currency:EUR"))
        keyboard.add(B("‚óÄ –ö –ª–æ—Ç–∞–º", callback_data=f"{CallbackButtons.LOTS_MENU}:0"))
        
        bot.send_message(message.chat.id, text_msg, reply_markup=keyboard, parse_mode="HTML")
        return True
    
    def _handle_max_price(self, message, bot, user_key: str, text: str) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
        state_data = self.wizard_states[user_key]
        lot_id = state_data.get("lot_id")
        steam_id = state_data.get("steam_id")
        steam_currency = state_data.get("steam_currency")
        min_price = state_data.get("min_price")
        
        try:
            max_price = float(text.replace(",", "."))
            if max_price <= min_price:
                bot.reply_to(message, f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {min_price:.2f}")
                return True
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.50)")
            return True
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ—Ç
        success = lot_manager.add_lot(lot_id, steam_id, steam_currency, min_price, max_price)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
        if user_key in self.wizard_states:
            del self.wizard_states[user_key]
            self.save_wizard_states()
        
        if success:
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            global_interval_hours = settings_manager.get("time", 21600) // 3600
            
            text_msg = "‚úÖ <b>–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            text_msg += f"üì¶ ID –ª–æ—Ç–∞: <code>{lot_id}</code>\n"
            text_msg += f"üéÆ Steam ID: <code>{steam_id}</code>\n"
            text_msg += f"üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {min_price:.2f} - {max_price:.2f} {settings_manager.get('currency', 'USD')}\n"
            text_msg += f"üåç –í–∞–ª—é—Ç–∞ Steam: {steam_currency}\n\n"
            text_msg += f"‚è∞ –õ–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ <b>{global_interval_hours} —á</b>"
            
            keyboard = K()
            keyboard.add(B("üì¶ –ö –ª–æ—Ç–∞–º", callback_data=f"{CallbackButtons.LOTS_MENU}:0"))
            keyboard.add(B("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"update_single_lot:{lot_id}"))
            
            bot.send_message(message.chat.id, text_msg, reply_markup=keyboard, parse_mode="HTML")
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞")
        
        return True
    
    def handle_currency_selection(self, call: telebot.types.CallbackQuery, bot) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –≤ –º–∞—Å—Ç–µ—Ä–µ"""
        try:
            logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã: call.data = {call.data}")
            
            if not call.data:
                logger.error(f"{LOGGER_PREFIX} –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ callback")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ü–∞—Ä—Å–∏–º –≤–∞–ª—é—Ç—É –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
            callback_parts = call.data.split(':')
            if len(callback_parts) < 2:
                logger.error(f"{LOGGER_PREFIX} –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö: {call.data}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            currency = callback_parts[1]
            user_key = self.get_user_key(call)
            
            logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_key} –≤—ã–±—Ä–∞–ª –≤–∞–ª—é—Ç—É: {currency}")
            
            if user_key not in self.wizard_states:
                logger.warning(f"{LOGGER_PREFIX} –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_key}")
                bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞")
                return
            
            state_data = self.wizard_states[user_key]
            logger.debug(f"{LOGGER_PREFIX} –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_data}")
            
            lot_id = state_data.get("lot_id")
            steam_id = state_data.get("steam_id")
            min_price = state_data.get("min_price")
            
            if not all([lot_id, steam_id, min_price is not None]):
                logger.error(f"{LOGGER_PREFIX} –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: lot_id={lot_id}, steam_id={steam_id}, min_price={min_price}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.wizard_states[user_key] = {
                "step": "max_price",
                "lot_id": lot_id,
                "steam_id": steam_id,
                "steam_currency": currency,
                "min_price": min_price
            }
            self.save_wizard_states()
            
            logger.info(f"{LOGGER_PREFIX} –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —à–∞–≥ max_price")
            
            text = "üßô‚Äç‚ôÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞</b>\n\n"
            text += "üìã <b>–®–∞–≥ 4 –∏–∑ 4: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞</b>\n\n"
            text += f"‚úÖ ID –ª–æ—Ç–∞: <code>{lot_id}</code>\n"
            text += f"‚úÖ Steam ID: <code>{steam_id}</code>\n"
            text += f"‚úÖ –í–∞–ª—é—Ç–∞: <code>{currency}</code>\n"
            text += f"‚úÖ –ú–∏–Ω. —Ü–µ–Ω–∞: <code>{min_price:.2f} {settings_manager.get('currency', 'USD')}</code>\n\n"
            text += f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–±–æ–ª—å—à–µ {min_price:.2f}):"
            
            keyboard = K()
            keyboard.add(B("‚óÄ –ö –ª–æ—Ç–∞–º", callback_data=f"{CallbackButtons.LOTS_MENU}:0"))
            
            bot.edit_message_text(text, call.message.chat.id, call.message.id,
                                  reply_markup=keyboard, parse_mode="HTML")
            bot.answer_callback_query(call.id, f"‚úÖ –í–∞–ª—é—Ç–∞: {currency}")
            
            logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –≤ –º–∞—Å—Ç–µ—Ä–µ: {e}", exc_info=True)
            try:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")
            except:
                pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Å—Ç–µ—Ä–∞
lot_wizard = LotWizard()